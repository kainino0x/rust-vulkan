/* automatically generated by rust-bindgen */

pub enum Struct_VkDebugReportCallbackEXT_T { }
pub type VkDebugReportCallbackEXT = *mut Struct_VkDebugReportCallbackEXT_T;
#[derive(Clone, Eq, PartialEq, Debug, Copy)]
#[repr(u32)]
pub enum Enum_VkDebugReportObjectTypeEXT {
    VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0,
    VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1,
    VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4,
    VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6,
    VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10,
    VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14,
    VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17,
    VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23,
    VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25,
    VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26,
    VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = 28,
}
pub type VkDebugReportObjectTypeEXT = Enum_VkDebugReportObjectTypeEXT;
#[derive(Clone, Eq, PartialEq, Debug, Copy)]
#[repr(u32)]
pub enum Enum_VkDebugReportErrorEXT {
    VK_DEBUG_REPORT_ERROR_NONE_EXT = 0,
    VK_DEBUG_REPORT_ERROR_CALLBACK_REF_EXT = 1,
}
pub type VkDebugReportErrorEXT = Enum_VkDebugReportErrorEXT;
#[derive(Clone, Eq, PartialEq, Debug, Copy)]
#[repr(u32)]
pub enum Enum_VkDebugReportFlagBitsEXT {
    VK_DEBUG_REPORT_INFO_BIT_EXT = 1,
    VK_DEBUG_REPORT_WARN_BIT_EXT = 2,
    VK_DEBUG_REPORT_PERF_WARN_BIT_EXT = 4,
    VK_DEBUG_REPORT_ERROR_BIT_EXT = 8,
    VK_DEBUG_REPORT_DEBUG_BIT_EXT = 16,
}
pub type VkDebugReportFlagBitsEXT = Enum_VkDebugReportFlagBitsEXT;
pub type VkDebugReportFlagsEXT = VkFlags;
pub type PFN_vkDebugReportCallbackEXT =
    ::std::option::Option<unsafe extern "C" fn(flags: VkDebugReportFlagsEXT,
                                               objectType:
                                                   VkDebugReportObjectTypeEXT,
                                               object: uint64_t,
                                               location: size_t,
                                               messageCode: int32_t,
                                               pLayerPrefix:
                                                   *const ::std::os::raw::c_char,
                                               pMessage:
                                                   *const ::std::os::raw::c_char,
                                               pUserData:
                                                   *mut ::std::os::raw::c_void)
                              -> VkBool32>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VkDebugReportCallbackCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDebugReportFlagsEXT,
    pub pfnCallback: PFN_vkDebugReportCallbackEXT,
    pub pUserData: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_VkDebugReportCallbackCreateInfoEXT {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VkDebugReportCallbackCreateInfoEXT {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VkDebugReportCallbackCreateInfoEXT =
    Struct_VkDebugReportCallbackCreateInfoEXT;
pub type PFN_vkCreateDebugReportCallbackEXT =
    ::std::option::Option<unsafe extern "C" fn(instance: VkInstance,
                                               pCreateInfo:
                                                   *const VkDebugReportCallbackCreateInfoEXT,
                                               pAllocator:
                                                   *const VkAllocationCallbacks,
                                               pCallback:
                                                   *mut VkDebugReportCallbackEXT)
                              -> VkResult>;
pub type PFN_vkDestroyDebugReportCallbackEXT =
    ::std::option::Option<unsafe extern "C" fn(instance: VkInstance,
                                               callback:
                                                   VkDebugReportCallbackEXT,
                                               pAllocator:
                                                   *const VkAllocationCallbacks)>;
pub type PFN_vkDebugReportMessageEXT =
    ::std::option::Option<unsafe extern "C" fn(instance: VkInstance,
                                               flags: VkDebugReportFlagsEXT,
                                               objectType:
                                                   VkDebugReportObjectTypeEXT,
                                               object: uint64_t,
                                               location: size_t,
                                               messageCode: int32_t,
                                               pLayerPrefix:
                                                   *const ::std::os::raw::c_char,
                                               pMessage:
                                                   *const ::std::os::raw::c_char)>;
#[link(name = "vulkan")]
extern "C" {
    pub fn vkCreateDebugReportCallbackEXT(instance: VkInstance,
                                          pCreateInfo:
                                              *const VkDebugReportCallbackCreateInfoEXT,
                                          pAllocator:
                                              *const VkAllocationCallbacks,
                                          pCallback:
                                              *mut VkDebugReportCallbackEXT)
     -> VkResult;
    pub fn vkDestroyDebugReportCallbackEXT(instance: VkInstance,
                                           callback: VkDebugReportCallbackEXT,
                                           pAllocator:
                                               *const VkAllocationCallbacks);
    pub fn vkDebugReportMessageEXT(instance: VkInstance,
                                   flags: VkDebugReportFlagsEXT,
                                   objectType: VkDebugReportObjectTypeEXT,
                                   object: uint64_t, location: size_t,
                                   messageCode: int32_t,
                                   pLayerPrefix:
                                       *const ::std::os::raw::c_char,
                                   pMessage: *const ::std::os::raw::c_char);
}
